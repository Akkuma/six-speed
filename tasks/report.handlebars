<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="report.css">
  </head>
  <body>
    <table>
      <caption>Performance of ES6 features relative to the ES5 baseline operations per second.</caption>
      <thead>
        <tr>
          <td colspan="2"></td>
          {{#each browsers}}
            <th class="browser-first" colspan="{{versions.length}}">{{name}}</th>
          {{/each}}
        </tr>
        <tr>
          <td colspan="2"></td>
          {{#each browsers}}
            {{#each versions}}
              <th class="{{#if @first}}browser-first{{/if}}">{{this}}</th>
            {{/each}}
          {{/each}}
        </tr>
      </thead>

      <tbody>
        {{#each tests}}
          {{#each types}}
            <tr {{#if @first}}class="feature-row" id="test-{{../../name}}"{{/if}}>
              {{#if @first}}
                <th rowspan="{{../../types.length}}">
                  {{../../name}}
                  <a class="test-link" href="https://github.com/kpdecker/six-speed/tree/master/tests/{{../../name}}">tests</a>
                </th>
              {{/if}}
              <th>{{name}}</th>

              {{#each results}}
                <td class="{{clazz}}">{{text}}</td>
              {{/each}}
            </tr>
          {{/each}}
        {{/each}}
      </tbody>
    </table>

    <p>
      Run on {{date}} using babel {{babelVersion}}, babel-runtime {{babelRuntimeVersion}}, and traceur {{traceurVersion}}.
    </o>


    <h2>Testing methodology</h2>

    <p>
      For each of the ES6 features in question, a ES5 implementation of that functionality was written along with a ES6 version. It should be noted that the functionality is frequently the same, but in some cases the "common" vs. "correct" version was written, i.e. using <code>x[key] = value</code> vs. <code>defineProperty</code> which is faster but can be hit but a particular nasty edge case for those who deem it fun to extend <code>Object.prototype</code>.
    </p>
    <p>
      Babel, in both loose+runtime and runtime mode, and Traceur were then used to compile the ES6 version to a ES5 compliant version, utilizing the runtime over polyfill to maintain test isolation and avoid native implementations where possible.
    </p>
    <p>
      All of these test instances were then benchmarked in the given JavaScript engine using [Benchmark.js](http://benchmarkjs.com/) and then the operations per second compared to the ES5 implementation. Cross browser and cross execution comparisions are avoided as much as possible to isolate environmental issues when executing on VMs in the cloud. <code>Identical</code> indicates that the tested implementation was +/- 10% of the ES5 implementation.
    </p>

    <a href="https://github.com/kpdecker/six-speed"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png"></a>

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-15628919-5', 'auto');
      ga('send', 'pageview');

    </script>
  </body>
</html>
